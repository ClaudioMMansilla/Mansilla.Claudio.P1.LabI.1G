#include <stdio.h>
#include <stdlib.h>
#include "string.h"


#include "Color.h"
#include "Fecha.h"
#include "Marca.h"
#include "Trabajo.h"
#include "Servicio.h"
#include "Auto.h"
#include "Menu.h"


int informeIngresosPorServicio(eTrabajo trabajos[], int tamT, eServicio servicios[], int tamS){

	int control = 0;

	int idBuscado;
    int contTrabajos = 0;
    float precio = 0;
    float importeTotal = 0;
    char descrip[25];

    listarServicios(servicios, tamS);
	printf("Id Servicio: (ingrese el codigo que corresponda)\n");
	scanf("%d", &idBuscado);
	while( !validarServicio(servicios, tamS, idBuscado))
	{
		printf("Id invalido. Reingrese id servicio: \n");
		scanf("%d", &idBuscado);
	}

    cargarServDescrip(servicios, tamS, idBuscado, descrip, &precio);

    if( trabajos != NULL && tamT > 0 && servicios != NULL && tamS > 0)
    {
    	for(int i=0; i < tamT; i++)
    	{
    		if( !trabajos[i].isEmpty && trabajos[i].idServicio == idBuscado)
    		{
    			contTrabajos++;

    			for(int j=0; j < tamS; j++){

    				if(servicios[j].precio == idBuscado){
    					precio = servicios[j].precio;
    				}
    			}
    		}
    	}

        if(contTrabajos > 0)
        {
        	importeTotal = contTrabajos * precio;
        }

        system("cls");
        printf("   *** Informe de saldos por %s ***\n\n", descrip);
        printf("Trabajos registrados: %d  || Ingresos $ %.2f\n\n", contTrabajos, importeTotal);
        printf("______________________________________________\n");
        control = 1;
    }
    return control;
}

int informeIngresosPorAuto(eTrabajo trabajos[], int tamT, eServicio servicios[], int tamS,
						   eAuto autos[], int tamA, eMarca marcas[], int tamM,
						   eColor colores[], int tamC){

	int control = 0;
	int flagEmpty = 1;
	char autoId[8];
    float acumTrabajos = 0;


    if( trabajos != NULL && tamT > 0 && servicios != NULL && tamS > 0
    		&& autos != NULL && tamA > 0 && marcas != NULL && tamM > 0)
    {
    	system("cls");
       	listarAutos(autos, tamA, marcas, tamM, colores, tamC);
        printf("Ingrese id de auto para calcular ingresos por trabajos realizados)\n");
        fflush(stdin);
        gets(autoId);
        strupr(autoId);
        while( !validarAuto(autos, tamA, autoId) )
        {
            printf("Id invalido. Reintente nuevamente: \n");
            fflush(stdin);
            gets(autoId);
            strupr(autoId);
        }



    	system("cls");
    	printf(" 		** Listado de trabajos registrados ** \n");
    	printf("-------------------------------------------------------------------\n");
    	printf(" id    Auto (patente)     Fecha Trabajo       Servicio     Precio \n");
    	printf("-------------------------------------------------------------------\n");
//    	printf("%2d          %8s       %02d/%02d/%4d              %10s       %.2f \n",

        for(int i=0; i < tamT; i++)
        {
        	if( !trabajos[i].isEmpty && ( strcmp(trabajos[i].idAuto, autoId) == 0) )
        	{
        		for(int j=0; j< tamS; j++){
        			if(trabajos[i].idServicio == servicios[j].id){

        				mostrarTrabajo(trabajos[i], servicios, tamS);
        				acumTrabajos += servicios[j].precio;
        				flagEmpty = 0;

        			}
        		}
        	}
        }

    	printf("-------------------------------------------------------------------\n");
    	printf("            TOTAL DE INGRESOS POR SERVICIOS REALIZADOS = $ %.2f \n\n", acumTrabajos);


        if(flagEmpty)
        {
            printf(" No hay trabajos registrados en el sistema\n");
        }

    	control = 1;
//    	system("pause");
    }

	return control;
}



int listarAutosPorMarcaColor(eTrabajo trabajos[], int tamT, eServicio servicios[], int tamS,
						   eAuto autos[], int tamA, eMarca marcas[], int tamM,
						   eColor colores[], int tamC){

	int control = 0;
	int flagEmpty = 1;
//	char autoId[8];
    int contadorAutos = 0;
    int idMarcaAux;
    int idColorAux;



    if( trabajos != NULL && tamT > 0 && servicios != NULL && tamS > 0
    		&& autos != NULL && tamA > 0 && marcas != NULL && tamM > 0)
    {
    	system("cls");
       	listarMarcas(marcas, tamM);
        printf("Ingrese id de la marca que desea consultar\n");
        fflush(stdin);
        scanf("%d", &idMarcaAux);
        while( !validarMarca(marcas, tamM, idMarcaAux))
        {
            printf("Id invalido. Reintente nuevamente: \n");
            fflush(stdin);
            scanf("%d", &idMarcaAux);
        }


       	listarColores(colores, tamC);
        printf("Ingrese id del color que desea consultar\n");
        fflush(stdin);
        scanf("%d", &idColorAux);
        while( !validarColor(colores, tamC, idColorAux))
        {
            printf("Id invalido. Reintente nuevamente: \n");
            fflush(stdin);
            scanf("%d", &idColorAux);
        }


    	system("cls");
    	printf("   ** Listado de vehiculos registrados ** \n");
    	printf("--------------------------------------------------\n");
    	printf("id (patente)   Tipo Caja       Marca        Color \n");
    	printf("--------------------------------------------------\n");

        for(int i=0; i < tamA; i++)
        {
            if( !autos[i].isEmpty && autos[i].idMarca == idMarcaAux && autos[i].idColor == idColorAux)
            {
                mostrarAuto(autos[i], marcas, tamM, colores, tamC);
                contadorAutos++;
                flagEmpty = 0;
            }
        }

        if(flagEmpty)
        {
            printf(" No hay vehiculos registrados en el sistema\n");
        }

    	printf("--------------------------------------------------\n");
    	printf("Autos encontrados en registros segun busqueda: %d \n\n", contadorAutos);


        if(flagEmpty)
        {
            printf(" No hay trabajos registrados en el sistema\n");
        }

    	control = 1;
//    	system("pause");
    }

	return control;
}



int informeAutosMaximoColor(eAuto autos[], int tamA, eColor colores[], int tamC){

//	{5000, "Negro"},
//	{5001, "Blanco"},
//	{5002, "Rojo"},
//	{5003, "Verde"},
//	{5004, "Azul"}

	int control = 0;
	int flagColor = 1;
    int color;
	int mayor = 0;
	int idMayor;
//	char autoId[8];
    char descrip[20];



    typedef struct{
    	int idColor;
    	int cantidad;
    }structAux;

    structAux colorAuxiliar[5]={
    		{5000, 0},
			{5001, 0},
			{5002, 0},
			{5003, 0},
			{5004, 0},
    };


    if( autos != NULL && tamA > 0 && colores != NULL && tamC > 0)
    {

    	system("cls");
    	printf("** Informe de color/es mas elegidos ** \n");
    	printf("--------------------------------------\n");
    	printf("   Codigo       Descripcion     \n");
    	printf("--------------------------------------\n");

        for(int i=0; i < tamA; i++)
        {
            if( !autos[i].isEmpty )
            {
            	color = autos[i].idColor;
            	for(int j=0; j < tamC; j++){
            		if(colorAuxiliar[j].idColor == color)
            		{
            			&colorAuxiliar[j].cantidad++;
            		}
            	}
            }
        }

//        (flagColor || autos[i].idColor == colorAuxiliar->idColor ))

    	for(int i=0; i < tamC; i++){
        	if(flagColor || colorAuxiliar[i].cantidad > mayor)
        	{
        		mayor = colorAuxiliar[i].cantidad;
        		idMayor = colorAuxiliar[i].idColor;

        		cargarNombreColor(colores, tamC, idMayor, descrip);
        		if( colorAuxiliar[i].cantidad == mayor )
        		{
        			printf("|%d            %10s| \n", idMayor, descrip);
        		}

        		flagColor = 0;
        	}
    	}



        if(flagColor)
        {
            printf(" Hubo un error, reintente nuevamente \n");
        }


	}

    	control = 1;
//    	system("pause");


	return control;
}
